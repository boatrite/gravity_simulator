// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Entity = (function() {
    function Entity(options) {
      this.calculateForce = __bind(this.calculateForce, this);
      this.draw = __bind(this.draw, this);
      this.update = __bind(this.update, this);
      this.mass = options.mass || 1;
      this.radius = options.radius || 10;
      this.position = options.position || new Vector(0, 0);
      this.velocity = options.velocity || new Vector(0, 0);
      this.color = options.color || '#ffffff';
      this.name = options.name;
      this.path = new Path(this.position, 400, this.color);
      new EntityInputs(this);
    }

    Entity.prototype.update = function(dt, entities) {
      var accel, entity, force, _i, _len;
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        if (!(entity !== this)) {
          continue;
        }
        force = this.calculateForce(entity);
        accel = force.divide(this.mass);
        this.velocity = this.velocity.add(accel.times(dt));
        this.position = this.position.add(this.velocity.times(dt));
      }
      return this.path.continueTo(this.position);
    };

    Entity.prototype.draw = function(context) {
      new Circle(this.position, this.radius, this.color).draw(context);
      return this.path.draw(context);
    };

    Entity.prototype.calculateForce = function(otherEntity) {
      var forceDirection, forceMagnitude, radialFromEntityToThis, separationDistance;
      radialFromEntityToThis = this.position.subtract(otherEntity.position);
      separationDistance = radialFromEntityToThis.length();
      forceMagnitude = (-Universe.G * otherEntity.mass * this.mass) / (separationDistance * separationDistance);
      forceDirection = radialFromEntityToThis.normalize();
      return forceDirection.times(forceMagnitude);
    };

    return Entity;

  })();

}).call(this);
