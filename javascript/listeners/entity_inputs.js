// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.EntityInputs = (function() {
    function EntityInputs(entity) {
      this.entity = entity;
      this.attachListeners = __bind(this.attachListeners, this);
      this.attachListeners();
    }

    EntityInputs.prototype.attachListeners = function() {
      var $color, $mass, $posX, $posY, $radius, $velX, $velY, entityName;
      entityName = this.entity.name;
      $mass = $("#mass-" + entityName);
      $mass.val(this.entity.mass);
      $mass.on('change', (function(_this) {
        return function() {
          return _this.entity.mass = _this.toInt($mass.val());
        };
      })(this));
      $radius = $("#radius-" + entityName);
      $radius.val(this.entity.radius);
      $radius.on('change', (function(_this) {
        return function() {
          return _this.entity.radius = _this.toInt($radius.val());
        };
      })(this));
      $posX = $("#position-x-" + entityName);
      $posX.val(this.entity.position.x);
      $posX.on('change', (function(_this) {
        return function() {
          return _this.entity.position.x = _this.toInt($posX.val());
        };
      })(this));
      $posY = $("#position-y-" + entityName);
      $posY.val(this.entity.position.y);
      $posY.on('change', (function(_this) {
        return function() {
          return _this.entity.position.y = _this.toInt($posY.val());
        };
      })(this));
      $velX = $("#velocity-x-" + entityName);
      $velX.val(this.entity.velocity.x);
      $velX.on('change', (function(_this) {
        return function() {
          return _this.entity.velocity.x = _this.toInt($velX.val());
        };
      })(this));
      $velY = $("#velocity-y-" + entityName);
      $velY.val(this.entity.velocity.y);
      $velY.on('change', (function(_this) {
        return function() {
          return _this.entity.velocity.y = _this.toInt($velY.val());
        };
      })(this));
      $color = $("#color-" + entityName);
      $color.val(this.entity.color);
      return $color.on('change', (function(_this) {
        return function() {
          return _this.entity.color = $color.val();
        };
      })(this));
    };

    EntityInputs.prototype.toInt = function(string) {
      return parseInt(string, 10);
    };

    return EntityInputs;

  })();

}).call(this);
