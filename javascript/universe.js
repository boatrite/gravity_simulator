// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Universe = (function() {
    Universe.G = 1;

    function Universe() {
      this.drawBackground = __bind(this.drawBackground, this);
      this.drawEntities = __bind(this.drawEntities, this);
      this.force_on_entity_by_entity = __bind(this.force_on_entity_by_entity, this);
      this.calculateNetForces = __bind(this.calculateNetForces, this);
      this.updateAll = __bind(this.updateAll, this);
      this.removeMarkedEntities = __bind(this.removeMarkedEntities, this);
      this.forceRedraw = __bind(this.forceRedraw, this);
      this.drawAll = __bind(this.drawAll, this);
      this.tick = __bind(this.tick, this);
      this.addEntities = __bind(this.addEntities, this);
      this.addEntity = __bind(this.addEntity, this);
      this.entities = [];
    }

    Universe.prototype.addEntity = function(entity) {
      return this.entities.push(entity);
    };

    Universe.prototype.addEntities = function(entities) {
      var entity, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        _results.push(this.addEntity(entity));
      }
      return _results;
    };

    Universe.prototype.tick = function(dt) {
      this.removeMarkedEntities();
      this.updateAll(dt);
      return this.drawAll();
    };

    Universe.prototype.drawAll = function() {
      this.drawBackground();
      return this.drawEntities();
    };

    Universe.prototype.forceRedraw = function() {
      this.removeMarkedEntities();
      return this.drawAll();
    };

    Universe.prototype.removeMarkedEntities = function() {
      return this.entities = this.entities.reject(function(entity) {
        return entity.markedForRemoval;
      });
    };

    Universe.prototype.updateAll = function(dt) {
      var entity, net_forces, _i, _len, _ref, _results;
      net_forces = this.calculateNetForces();
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.update(dt, net_forces[entity.name]));
      }
      return _results;
    };

    Universe.prototype.calculateNetForces = function() {
      var entity, entity_one, entity_two, force_on_one_by_two, net_forces, x, y, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3;
      net_forces = {};
      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        net_forces[entity.name] = new Vector(0, 0);
      }
      for (x = _j = 0, _ref1 = this.entities.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        entity_one = this.entities[x];
        for (y = _k = _ref2 = x + 1, _ref3 = this.entities.length; _ref2 <= _ref3 ? _k < _ref3 : _k > _ref3; y = _ref2 <= _ref3 ? ++_k : --_k) {
          entity_two = this.entities[y];
          force_on_one_by_two = this.force_on_entity_by_entity(entity_one, entity_two);
          net_forces[entity_one.name] = net_forces[entity_one.name].add(force_on_one_by_two);
          net_forces[entity_two.name] = net_forces[entity_two.name].add(force_on_one_by_two.times(-1));
        }
      }
      return net_forces;
    };

    Universe.prototype.force_on_entity_by_entity = function(entityOne, entityTwo) {
      var forceDirection, forceMagnitude, radialFromTwoToOne, separationDistance;
      radialFromTwoToOne = entityOne.position.subtract(entityTwo.position);
      separationDistance = radialFromTwoToOne.length();
      forceMagnitude = (-Universe.G * entityTwo.mass * entityOne.mass) / (separationDistance * separationDistance);
      forceDirection = radialFromTwoToOne.normalize();
      return forceDirection.times(forceMagnitude);
    };

    Universe.prototype.drawEntities = function() {
      var entity, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.draw());
      }
      return _results;
    };

    Universe.prototype.drawBackground = function() {
      context().fillStyle = 'black';
      return context().fillRect(0, 0, canvas().width, canvas().height);
    };

    return Universe;

  })();

}).call(this);
